pipeline {
    agent any

    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['staging', 'production'],
            description: 'Choose the environment for deployment'
        )
    }

    stages {
        stage('Checkout Code') {
            steps {
                // Checkout code from the Git repository
                checkout scm
            }
        }

        stage('Generate Image Tag') {
            steps {
                script {
                    // Generate the image tag based on the current datetime
                    def now = new Date()
                    def formattedDate = now.format("yyyyMMdd-HHmmss")
                    env.IMAGE_TAG = formattedDate
                }
            }
        }

        stage('Load Global Configuration') {
            steps {
                script {
                    // Load service-specific configuration from config.groovy
                    def config = evaluate(readFile('Environments/Jenkins/global-config.groovy'))
                    def envConfig = evaluate(readFile("Environments/Jenkins/${params.ENVIRONMENT}-config.groovy"))

                    // Set environment variables from the configuration
                    env.KUBECONFIG = config.KUBECONFIG
                    env.KUBE_CONTEXT = config.KUBE_CONTEXT
                    env.DOCKER_CREDENTIAL_ID = config.DOCKER_CREDENTIAL_ID

                    env.NAMESPACE = envConfig.NAMESPACE
                    env.ENV_NAME = envConfig.ENV_NAME
                }
            }
        }

        stage('Load Specific Configuration') {
            steps {
                script {
                    // Load service-specific configuration from config.groovy
                    def config = evaluate(readFile("./Environments/Jenkins/IdPUiService/${params.ENVIRONMENT}-config.groovy"))

                    // Set environment variables from the configuration
                    env.IMAGE_NAME = config.IMAGE_NAME
                    env.DOCKERFILE = config.DOCKERFILE
                    env.SECRET_CONFIGMAP_PATH = config.SECRET_CONFIGMAP_PATH
                    env.SERVICES_PATH = config.SERVICES_PATH

                    // Set environment variables for UI Service
                    env.IDP_UI_DEPLOYMENT_NAME = config.IDP_UI_DEPLOYMENT_NAME
                    env.IDP_UI_SERVICE_NAME = config.IDP_UI_SERVICE_NAME
                    env.IDP_UI_CONTAINER_NAME = config.IDP_UI_CONTAINER_NAME
                    env.IDP_UI_PORT = config.IDP_UI_PORT.toString()
                    env.IDP_UI_REPLICAS = config.IDP_UI_REPLICAS.toString()
                    env.IDP_UI_NODE_PORT = config.IDP_UI_NODE_PORT.toString()
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image from Dockerfile
                    sh "docker build -t ${env.IMAGE_NAME}:${env.IMAGE_TAG} --build-arg ENVIRONMENT=${env.ENV_NAME} ./src -f ${env.DOCKERFILE}"
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry("https://index.docker.io/v1/", "${env.DOCKER_CREDENTIAL_ID}") {
                        // Push the Docker image to the registry
                        sh "docker push ${env.IMAGE_NAME}:${env.IMAGE_TAG}"
                    }
                }
            }
        }

        stage('Deploy Secrets and ConfigMaps') {
            steps {
                script {
                    def secretFiles = findFiles(glob: "${env.SECRET_CONFIGMAP_PATH}")
                    secretFiles.each { file ->
                        echo "Applying secret or configmap: ${file.path}"
                        echo "Checking contexts"
                        echo "kubectl config get-contexts"
                        sh "kubectl get nodes"
                        sh "kubectl --context=${env.KUBE_CONTEXT} apply -f ${file.path} -n ${env.NAMESPACE}"
                    }
                }
            }
        }

        stage('Deploy Services') {
            steps {
                script {
                    def serviceFiles = findFiles(glob: "${env.SERVICES_PATH}")
                    serviceFiles.each { file ->
                        echo "Applying Service and Deployment: ${file.path}"

                        // Replace placeholders in each service file based on the ddconfig
                        def serviceYAML = readFile(file.path)
                        serviceYAML = serviceYAML.replaceAll(/\$\{([A-Z_]+)\}/) { env[it[1]] }

                        // Write the modified YAML back and apply it
                        writeFile file: file.path, text: serviceYAML
                        sh "kubectl --context=${KUBE_CONTEXT} apply -f ${file.path} -n ${env.NAMESPACE}"
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up the workspace after the job is completed
            cleanWs()
        }
    }
}
